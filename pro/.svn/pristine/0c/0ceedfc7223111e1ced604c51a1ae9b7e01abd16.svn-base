#include "sessionmanager.h"
//This class will keep track of what user is currently logged in and what permissions he/she has.
SessionManager::SessionManager(string username, string password)
{
    current_user = new User(username, password, 1);

    current_user->userGetInfo();
}

SessionManager::SessionManager(){

}


SessionManager::~SessionManager(){

}


std::vector<std::vector<std::string> > SessionManager::getMessagesGroup(string currentGroup){
        //open db connection
        DBHandler *db = new DBHandler(&log);
                //= *(new DBHandler::DBHandler());
        //create a vector to catch the db dump
        std::vector<std::vector<std::string> > dump;

        //build query
        std::string query = "SELECT time, sendername, content from "+ currentGroup +"_content;";
        //run query
        dump = *(db->runQueryMessages(query));

        return dump;
    }

bool SessionManager::addMessagesGroup(string message, string currentGroup, string time){
        //open db connection
        DBHandler *db = new DBHandler(&log);
                //= *(new DBHandler::DBHandler());
        //create a vector to catch the db dump
        bool dump;

        //build query
        std::string query = "INSERT into "+ currentGroup +"_content (time, content, sendername) values ('"+ time + "','" + message + "','" + current_user->username + "');"
                            "INSERT into "+ current_user->username+ "_messages (time, content, groupname) values('"+time+"','" +message+ "','" +currentGroup + "');";
        //run query
        dump = (db->runAddQuery(query));

        return dump;
    }

std::vector<std::string> SessionManager::getGroups(){
    DBHandler *db = new DBHandler(&log);
            //= *(new DBHandler::DBHandler());
    //create a vector to catch the db dump
    std::vector<std::vector<std::string> > dump;

    std::cout << current_user->username<< std::endl;

    //build query
    std::string query = "SELECT * from usergroups where usergroups.username = '"+current_user->username+"';";
    //run query
    dump = *(db->runQuery(query));

    //std::cout << dump.size() << std::endl;

    std::vector<std::string> groupList = dump.at(1);

    return groupList;
}

//std::vector<std::vector<std::string> > SessionManager::getMainFeed(){

    ////OKAY SO HERE I THOUGHT OF MULTIPLE WAYS TO APPROACH
    /// **We should either first grab the groups of a user in a vector<string>
    /// then use this vector contents one by one to get the specific group messages
    /// for example if vector.at(1) is dummyGroup1, get all the messages and times from dummyGroup1
    /// and pushback them into a new vector<vector<string>> to have a table of messages and times
    /// BUT IN THIS METHOD, IT MAY BE DIFFICULT TO SORT THEM BY TIME
    /// because we would be pushing them into the table one by one and
    /// in different groups there might be messages that come before the others.
    ///
    /// **Another method would be to create a different database into the db_tools, localDB.db
    /// If you can come up with something that could actually combine these two required inputs
    /// select *  from Table order by time(timeColumn) DESC LIMIT 1
    /// will sort them by time
    /// Therefore we wont have any problem with sorting the messages for MainFeed


//        //open db connection
//        DBHandler *db = new DBHandler(&log);
//                //= *(new DBHandler::DBHandler());
//        //create a vector to catch the db dump
//        std::vector<std::vector<std::string>> dump;

//        //build query
//        std::string query = "SELECT time, sendername, content from "+ currentGroup +"_content;";
//        //run query
//        dump = *(db->runQueryMessages(query));

//        return dump;
//    }
